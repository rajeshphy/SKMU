---
layout: post
title:  "Python-Object Oriented Programming Language"
date:   2025-03-11 06:47:26 +0530
categories: lecture
tags: SEM-I
---

Following topics will be covered here:

## Table of Contents
1. [Introduction to Object-Oriented Programming](#introduction-to-object-oriented-programming)
2. [Key Concepts of OOP](#key-concepts-of-oop)
   - [Classes and Objects](#classes-and-objects)
   - [Attributes and Methods](#attributes-and-methods)
   - [Encapsulation](#encapsulation)
   - [Inheritance](#inheritance)
   - [Polymorphism](#polymorphism)
3. [Basic Syntax for OOP in Python](#basic-syntax-for-oop-in-python)
   - [Defining a Class](#defining-a-class)
   - [Creating Objects](#creating-objects)
   - [Adding Attributes and Methods](#adding-attributes-and-methods)
   - [Constructor Method (`__init__`)](#constructor-method)
   - [Inheritance in Python](#inheritance-in-python)
   - [Polymorphism in Python](#polymorphism-in-python)
4. [Writing Your First OOP Program](#writing-your-first-oop-program)

---

## Introduction to Object-Oriented Programming

Object-Oriented Programming (OOP) is a programming paradigm that organizes software design around **objects** rather than functions and logic. An object is a self-contained unit that consists of:
- **Attributes (Data)**: Properties or characteristics of the object.
- **Methods (Functions)**: Actions or behaviors the object can perform.

OOP is based on four key principles:
1. **Encapsulation**: Bundling data and methods that operate on the data within a single unit (class).
2. **Inheritance**: Creating new classes (child classes) from existing ones (parent classes) to reuse code.
3. **Polymorphism**: Allowing objects of different classes to be treated as objects of a common superclass.
4. **Abstraction**: Hiding complex implementation details and exposing only essential features.

Python is an object-oriented language, meaning it supports OOP principles natively.

---

## Key Concepts of OOP

### Classes and Objects
- A **class** is a blueprint for creating objects. It defines the structure and behavior of objects.
- An **object** is an instance of a class. It represents a specific entity based on the class definition.

Example:
- Class: `Car`
- Objects: `car1`, `car2`, `car3` (each representing a specific car).

### Attributes and Methods
- **Attributes**: Variables that belong to an object (e.g., `color`, `model` for a `Car` object).
- **Methods**: Functions that belong to an object (e.g., `start_engine()`, `stop_engine()` for a `Car` object).

### Encapsulation
Encapsulation ensures that an object's internal state is hidden from the outside world. This is achieved using **access modifiers** like:
- **Public**: Accessible from anywhere.
- **Private**: Accessible only within the class (denoted by a double underscore `__`).

### Inheritance
Inheritance allows a class (child class) to inherit attributes and methods from another class (parent class). This promotes code reuse and modularity.

### Polymorphism
Polymorphism allows objects of different classes to be treated as objects of a common superclass. For example, a `Dog` and `Cat` class can both inherit from an `Animal` class and override a `speak()` method.

---

## Basic Syntax for OOP in Python

### Defining a Class
Use the `class` keyword to define a class.

```python
class Car:
    pass  # Empty class
```

### Creating Objects
Objects are created by calling the class as if it were a function.

```python
car1 = Car()  # Create an object of the Car class
car2 = Car()  # Create another object
```

### Adding Attributes and Methods
Attributes and methods are defined inside the class.

```python
class Car:
    # Attribute
    color = "red"

    # Method
    def start_engine(self):
        print("Engine started!")
```

- `self` refers to the current object and is used to access its attributes and methods.

Example:
```python
car1 = Car()
print(car1.color)  # Output: red
car1.start_engine()  # Output: Engine started!
```

### Constructor Method (`__init__`)
The `__init__` method is a special method called when an object is created. It is used to initialize attributes.

```python
class Car:
    def __init__(self, color, model):
        self.color = color
        self.model = model

    def start_engine(self):
        print(f"{self.model}'s engine started!")
```

Example:
```python
car1 = Car("blue", "Tesla Model S")
print(car1.color)  # Output: blue
car1.start_engine()  # Output: Tesla Model S's engine started!
```

### Inheritance in Python
Use the `class ChildClass(ParentClass)` syntax to create a child class.

```python
class Vehicle:
    def __init__(self, type):
        self.type = type

    def describe(self):
        print(f"This is a {self.type}.")

class Car(Vehicle):
    def __init__(self, type, model):
        super().__init__(type)  # Call the parent class constructor
        self.model = model

    def start_engine(self):
        print(f"{self.model}'s engine started!")
```

Example:
```python
car1 = Car("car", "Tesla Model S")
car1.describe()  # Output: This is a car.
car1.start_engine()  # Output: Tesla Model S's engine started!
```

### Polymorphism in Python
Polymorphism allows methods to behave differently based on the object.

```python
class Animal:
    def speak(self):
        pass  # Abstract method

class Dog(Animal):
    def speak(self):
        print("Woof!")

class Cat(Animal):
    def speak(self):
        print("Meow!")
```

Example:
```python
animals = [Dog(), Cat()]

for animal in animals:
    animal.speak()  # Output: Woof! Meow!
```

---

## Writing Your First OOP Program

Let's create a simple program to model a `BankAccount` class.

```python
class BankAccount:
    def __init__(self, account_holder, balance=0):
        self.account_holder = account_holder
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited ${amount}. New balance: ${self.balance}")

    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds!")
        else:
            self.balance -= amount
            print(f"Withdrew ${amount}. New balance: ${self.balance}")

    def display_balance(self):
        print(f"Account holder: {self.account_holder}, Balance: ${self.balance}")
```

Example Usage:
```python
account1 = BankAccount("Alice", 1000)
account1.deposit(500)  # Output: Deposited $500. New balance: $1500
account1.withdraw(200)  # Output: Withdrew $200. New balance: $1300
account1.display_balance()  # Output: Account holder: Alice, Balance: $1300
```

