---
layout: post
title:  "Python-Introduction"
date:   2025-03-10 08:47:26 +0530
categories: lecture
tags: SEM-I
---

# Introduction to Python Programming

## Table of Contents
1. [Introduction to Python](#introduction-to-python)
2. [Installing Python](#installing-python)
3. [Running Python Code](#running-python-code)
4. [Basic Syntax and Concepts](#basic-syntax-and-concepts)
   - [Variables and Data Types](#variables-and-data-types)
   - [Input and Output](#input-and-output)
   - [Operators](#operators)
   - [Conditional Statements](#conditional-statements)
   - [Loops](#loops)
5. [Writing Your First Python Program](#writing-your-first-python-program)

---

## Introduction to Python

Python is a high-level, interpreted programming language known for its simplicity and readability. It is widely used in various domains such as web development, data science, artificial intelligence, automation, and more. Python's syntax is designed to be easy to learn, making it an excellent choice for beginners.

### Features of Python
- **Easy to Learn**: Simple and readable syntax.
- **Interpreted**: No need for compilation; executed line by line.
- **Dynamic Typing**: No need to specify variable types.
- **Extensive Libraries**: SciPy, NumPy, Matplotlib, SymPy for scientific computing.
- **Cross-Platform**: Runs on Windows, Linux, and macOS.

### Writing and Running Python Code
Python code can be written in:
- Interactive Python Shell (REPL)
- Jupyter Notebooks
- Python Scripts (`.py` files)
- Integrated Development Environments (IDEs) like PyCharm, VS Code

---

## Installing Python

### Step 1: Download Python
1. Visit the official Python website: [https://www.python.org/](https://www.python.org/).
2. Go to the Downloads section and download the latest version of Python for your operating system (Windows, macOS, or Linux).

### Step 2: Install Python
1. Run the downloaded installer.
2. Check the box that says **"Add Python to PATH"** during installation.
3. Click **Install Now** and follow the instructions.

### Step 3: Verify Installation
1. Open a terminal (Command Prompt on Windows, Terminal on macOS/Linux).
2. Type the following command and press Enter:
   ```bash
   python --version
   ```
3. If Python is installed correctly, you will see the version number (e.g., `Python 3.11.2`).

---

## Running Python Code

### Option 1: Using the Python Interpreter
1. Open a terminal or command prompt.
2. Type `python` and press Enter.
3. You will enter the Python interactive shell, where you can type and execute Python code line by line.

   Example:
   ```python
   >>> print("Hello, World!")
   Hello, World!
   ```

### Option 2: Using a Text Editor or IDE
1. Open a text editor (e.g., Notepad, VS Code, PyCharm).
2. Write your Python code in a file with a `.py` extension (e.g., `hello.py`).
3. Save the file and run it using the terminal:
   ```bash
   python hello.py
   ```










## Basic Syntax and Concepts

### Variables and Data Types

Variables are used to store data. Python supports various data types, including:
- **Integers**: Whole numbers (e.g., `5`, `-10`)
- **Floats**: Decimal numbers (e.g., `3.14`, `-0.001`)
- **Strings**: Text (e.g., `"Hello"`, `'Python'`)
- **Booleans**: True or False

Example:
```python
# Variables and Data Types
x = 10          # Integer
y = 3.14        # Float
name = "Alice"  # String
is_student = True  # Boolean
```

### Input and Output

- **Output**: Use the `print()` function to display output.
- **Input**: Use the `input()` function to take user input.

Example:
```python
# Input and Output
name = input("Enter your name: ")
print("Hello,", name)
```

### Operators

Python supports various operators:
- **Arithmetic Operators**: `+`, `-`, `*`, `/`, `//`, `%`, `**`
- **Comparison Operators**: `==`, `!=`, `>`, `<`, `>=`, `<=`
- **Logical Operators**: `and`, `or`, `not`

Example:
```python
# Operators
a = 10
b = 3

print(a + b)  # Addition
print(a > b)  # Comparison
print(a > 5 and b < 5)  # Logical
```

### Conditional Statements

Conditional statements allow you to execute code based on conditions.

- **if**: Executes a block of code if the condition is true.
- **elif**: Checks another condition if the previous one is false.
- **else**: Executes a block of code if all conditions are false.

Example:
```python
# Conditional Statements
age = 18

if age >= 18:
    print("You are an adult.")
elif age >= 13:
    print("You are a teenager.")
else:
    print("You are a child.")
```

### Loops

Loops allow you to repeat a block of code multiple times.

- **for loop**: Iterates over a sequence (e.g., list, string).
- **while loop**: Repeats as long as a condition is true.

Example:
```python
# For Loop
for i in range(5):
    print(i)  # Output: 0, 1, 2, 3, 4

# While Loop
count = 0
while count < 5:
    print(count)
    count += 1  # Output: 0, 1, 2, 3, 4
```

---

## Writing Your First Python Program

Let's write a simple program that takes user input and performs a calculation.

```python
# Simple Calculator Program
# Get user input
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

# Perform calculation
sum_result = num1 + num2
product_result = num1 * num2

# Display results
print("Sum:", sum_result)
print("Product:", product_result)
```

**Output:**
```
Enter the first number: 10
Enter the second number: 5
Sum: 15.0
Product: 50.0
```

