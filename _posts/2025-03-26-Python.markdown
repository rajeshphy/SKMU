---
layout: post
title:  "IV. Python: Course Contents"
date:   2025-03-26 07:47:26 +0530
categories: lecture
tags: SEM-I
---

Here we will discuss each of course contents in detail.


## **Arrays**  
 **Definition**  
An array is a collection of elements of the same type stored at contiguous memory locations.  

 **Explanation**  
- Arrays in Python are implemented using the `list` or `numpy.array` module.  
- Lists are dynamic, whereas `numpy` arrays provide better performance for numerical operations.  

 **Coding Example**  
```python
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
print("Array elements:", arr)
```

## **Strings**  

**Definition**  
A string is a sequence of characters enclosed within single (`'`), double (`"`) or triple quotes (`'''` or `"""`).  

**Explanation**  
- Strings in Python are **immutable** (cannot be modified after creation).  
- Common operations on strings include:  
  - **Concatenation**: Joining two or more strings.  
  - **Slicing**: Extracting a portion of a string.  
  - **Iteration**: Looping through string characters.  
  - **Formatting**: Using placeholders for dynamic content.  

**Coding Example**  
```python
text = "Python Programming"
print(text[0:6])  # Output: Python
print(text.upper())  # Converts to uppercase
print(text + " is fun!")  # String concatenation
```

## **Integer and Floating Point Arithmetic**  

**Definition**  
Integer (`int`) and floating-point (`float`) arithmetic involve performing mathematical operations on numerical data types.  

**Explanation**  
- **Integers (`int`)** are whole numbers without decimals, e.g., `10`, `-5`, `1000`.  
- **Floating-point numbers (`float`)** are numbers with decimals, e.g., `3.14`, `-2.5`, `0.001`.  
- Python supports **automatic type conversion** between integers and floats.  
- **Common arithmetic operations include**:  
  - **Addition (`+`)** – Adds two numbers.  
  - **Subtraction (`-`)** – Subtracts one number from another.  
  - **Multiplication (`*`)** – Multiplies two numbers.  
  - **Division (`/`)** – Returns a floating-point quotient.  
  - **Floor Division (`//`)** – Returns the quotient without the decimal part.  
  - **Modulus (`%`)** – Returns the remainder of a division.  
  - **Exponentiation (`**`)** – Raises a number to a power.  

**Coding Example**  

```python
a, b = 15, 4

print(a + b)   # Output: 19 (Addition)
print(a - b)   # Output: 11 (Subtraction)
print(a * b)   # Output: 60 (Multiplication)
print(a / b)   # Output: 3.75 (Floating-point division)
print(a // b)  # Output: 3 (Floor division)
print(a % b)   # Output: 3 (Modulus - remainder of division)
print(a ** b)  # Output: 50625 (Exponentiation: 15^4)
```
---

## **Operators and Expressions**  

**Definition**  
Operators are symbols that perform operations on variables and values. An expression is a combination of values, variables, and operators that produces a result.  

**Explanation**  
Python supports different types of operators:  

**1. Arithmetic Operators**  
Perform basic mathematical operations.  

| Operator | Description    | Example (`a = 10, b = 3`) | Output  |
|----------|--------------|----------------|--------|
| `+`  | Addition       | `a + b`  | `13`  |
| `-`  | Subtraction    | `a - b`  | `7`  |
| `*`  | Multiplication | `a * b`  | `30`  |
| `/`  | Division       | `a / b`  | `3.333`  |
| `//` | Floor Division | `a // b` | `3`  |
| `%`  | Modulus        | `a % b`  | `1`  |
| `**` | Exponentiation | `a ** b` | `1000`  |



**2. Comparison Operators**  
Compare two values and return `True` or `False`.  

| Operator | Description                 | Example (`a = 10, b = 3`) | Output  |
|----------|----------------------------|----------------|--------|
| `==`  | Equal to                     | `a == b`  | `False`  |
| `!=`  | Not equal to                  | `a != b`  | `True`  |
| `>`   | Greater than                  | `a > b`   | `True`  |
| `<`   | Less than                     | `a < b`   | `False`  |
| `>=`  | Greater than or equal to      | `a >= b`  | `True`  |
| `<=`  | Less than or equal to         | `a <= b`  | `False`  |



**3. Logical Operators**  
Used to combine multiple conditions.  

| Operator | Description                                | Example (`x = True, y = False`) | Output  |
|----------|----------------------------------------|----------------|--------|
| `and`  | Returns `True` if both conditions are `True` | `x and y`  | `False`  |
| `or`   | Returns `True` if at least one condition is `True` | `x or y`  | `True`  |
| `not`  | Reverses the result                      | `not x`  | `False`  |



**4. Assignment Operators**  
Used to assign values to variables.  

| Operator | Example   | Equivalent To  |
|----------|---------|--------------|
| `=`  | `a = 10`   | `a = 10`  |
| `+=` | `a += 5`   | `a = a + 5`  |
| `-=` | `a -= 2`   | `a = a - 2`  |
| `*=` | `a *= 3`   | `a = a * 3`  |
| `/=` | `a /= 2`   | `a = a / 2`  |
| `//=` | `a //= 2`  | `a = a // 2`  |
| `%=` | `a %= 2`   | `a = a % 2`  |
| `**=` | `a **= 2`  | `a = a ** 2`  |



**5. Bitwise Operators**  
Perform operations on binary numbers.  

| Operator | Description         | Example (`a = 5, b = 3`) | Output  |
|----------|--------------------|----------------|--------|
| `&`  | AND operation       | `a & b`  | `1`  |
| `|`  | OR operation        | `a | b`  | `7`  |
| `^`  | XOR operation       | `a ^ b`  | `6`  |
| `~`  | NOT operation       | `~a`  | `-6`  |
| `<<` | Left Shift          | `a << 1` | `10`  |
| `>>` | Right Shift         | `a >> 1` | `2`  |









**Coding Example**  
```python
a, b = 10, 3

# Arithmetic Operations
print("Addition:", a + b)  # Output: 13
print("Floor Division:", a // b)  # Output: 3

# Comparison
print("Is a greater than b?", a > b)  # Output: True

# Logical Operations
x, y = True, False
print("x and y:", x and y)  # Output: False

# Assignment
a += 5
print("Updated a:", a)  # Output: 15
```